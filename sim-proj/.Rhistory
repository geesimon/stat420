str(cats)
as.numeric(cats$x2)
summary(m)
cats
m=lm(Hwt ~ Bwt + Sex, data = cats)
summary(m)
coef(lm(Hwt ~ Bwt * Sex, data = cats))
c=coef(lm(Hwt ~ Bwt * Sex, data = cats))
c[2] + c[3]
c[2] + c[4]
?iris
iris
nrows(iris)
nrow(iris)
str(iris)
View(iris)
m_add = lm(Hwt ~ Bwt + Sex, data = cats)
m_int = lm(Hwt ~ Bwt * Sex, data = cats)
m_sim = lm(Hwt ~ Bwt, data = cats)
anova(m_sim, m_int)
anova(m_sim, m_add)
iris_add = lm(Sepal.Length ~ Petal.Length + Species, data = iris)
summary(iris_add)
iris_add = lm(Sepal.Length ~ Petal.Length + Species, data = iris)
predict(iris_add,data.frame(Species="versicolor", Petal.Length=5.1))
predict(iris_add,data.frame(Species="versicolor1", Petal.Length=5.1))
iris_add = lm(Sepal.Length ~ Petal.Length + Species, data = iris)
confint(iris_add, level = 0.9)
(iris_int = lm(Sepal.Length ~ Petal.Length * Species, data = iris))
View(iris)
(iris_int = lm(Sepal.Length ~ (Petal.Width + Petal.Length + Species) ^2, data = iris))
(iris_int = lm(Sepal.Length ~ (0+Petal.Width + Petal.Length + Species) ^2, data = iris))
iris_int = lm(Sepal.Length ~ Petal.Length * Species, data = iris)
predict(iris_int, data.frame(Species = "versicolor", Petal.Length=5.10, level=0.99)
)
predict(iris_int, data.frame(Species = "versicolor", Petal.Length=5.10, levels=0.99))
predict(iris_int, data.frame(Species = "versicolor1", Petal.Length=5.10, levels=0.99))
?predict
predict(iris_int, level = 0.99, data.frame(Species = "versicolor1", Petal.Length=5.10))
predict(iris_int, level = 0.99, data.frame(Species = "versicolor", Petal.Length=5.10))
predict(iris_int, level = 0.99, data.frame(Species = "versicolor", Petal.Length=5.10))
predict(iris_int, level = 0.99, interval = c("prediction"), data.frame(Species = "versicolor", Petal.Length=5.10))
(iris_int = lm(Sepal.Length ~ Petal.Length * Species, data = iris))
1 / (coef(iris_int)["Petal.Length"] + coef(iris_int)["Petal.Length:Speciesversicolor"])
(coef(iris_int)["Petal.Length"] + coef(iris_int)["Petal.Length:Speciesversicolor"])
?swiss
View(swiss)
options(scipen = 1, digits = 4, width = 80)
options(scipen = 1, digits = 4, width = 80)
library(readr)
epa2015_data = read_csv("epa2015.csv")
#str(epa2015_data)
is.factor(epa2015_data$type)
epa2015_data$type = as.factor(epa2015_data$type)
is.factor(epa2015_data$type)
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = c(1, 2, 3), pch = c(1, 2, 3))
epa2015_sim = lm(CO2 ~ horse, data = epa2015_data)
abline(epa2015_sim, lwd = 3, col = "grey")
value = predict(epa2015_sim, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148))
coef(epa2015_sim)
value
?par
p=par()
p
p$pin
par(pin = c(8, 8))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
par(pin = c(7, 7))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
par(pin = c(6, 6))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
par(pin = c(5.5, 5.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
mar=c(3.0, 3.0, 1.5, 1.5)
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = c(1, 2, 3), pch = c(1, 2, 3))
epa2015_sim = lm(CO2 ~ horse, data = epa2015_data)
abline(epa2015_sim, lwd = 3, col = "grey")
value = predict(epa2015_sim, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148))
par(mar=c(3.0, 3.0, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = c(1, 2, 3), pch = c(1, 2, 3))
epa2015_sim = lm(CO2 ~ horse, data = epa2015_data)
abline(epa2015_sim, lwd = 3, col = "grey")
value = predict(epa2015_sim, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148))
par(mar=c(1.5, 1.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = c(1, 2, 3), pch = c(1, 2, 3))
epa2015_sim = lm(CO2 ~ horse, data = epa2015_data)
abline(epa2015_sim, lwd = 3, col = "grey")
value = predict(epa2015_sim, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148))
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = c(1, 2, 3), pch = c(1, 2, 3))
epa2015_sim = lm(CO2 ~ horse, data = epa2015_data)
abline(epa2015_sim, lwd = 3, col = "grey")
value = predict(epa2015_sim, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148))
levels(epa2015_data$type)
epa2015_data
nrow(epa2015_data[epa2015_data=="Car"])
nrow(epa2015_data[epa2015_data=="Car",])
nrow(epa2015_data[epa2015_data=="Both",])
str(epa2015_data)
View(epa2015_data)
epa2015_data
as.numeric(epa2015_data$type)
as.numeric(epa2015_data$type[1])
epa2015_data[1,]
levels(epa2015_data$type)
as.numeric(epa2015_data$type[50])
epa2015_sim = lm(CO2 ~ horse + type, data = epa2015_data)
coef(epa2015_sim)
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = c(1, 2, 3), pch = c(1, 2, 3))
epa2015_add = lm(CO2 ~ horse + type, data = epa2015_data)
int_both    = coef(epa2015_add)[1]
int_car     = coef(epa2015_add)[1] + coef(epa2015_add)["typeCar"]
int_truck   = coef(epa2015_add)[1] + coef(epa2015_add)["typeTruck"]
slope_both  = coef(epa2015_add)[2]
slope_car   = coef(epa2015_add)[2]
slope_truck = coef(epa2015_add)[2]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_sim, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148))
?levels
?level
values(epa2015_data$type)
value(epa2015_data$type)
as.numeric(levels(epa2015_data$type))
epa2015_data$type
levels(epa2015_data$type)
as.numeric(levels(epa2015_data$type))
as.numeric(levels(epa2015_data$type))[epa2015_data$type]
nlevels(epa2015_data$type)
levels(epa2015_data$type)
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_add = lm(CO2 ~ horse + type, data = epa2015_data)
int_both    = coef(epa2015_add)[1]
int_car     = coef(epa2015_add)[1] + coef(epa2015_add)["typeCar"]
int_truck   = coef(epa2015_add)[1] + coef(epa2015_add)["typeTruck"]
slope_both  = coef(epa2015_add)[2]
slope_car   = coef(epa2015_add)[2]
slope_truck = coef(epa2015_add)[2]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_add, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_add = lm(CO2 ~ horse + type, data = epa2015_data)
int_both    = coef(epa2015_add)[1]
int_car     = coef(epa2015_add)[1] + coef(epa2015_add)["typeCar"]
int_truck   = coef(epa2015_add)[1] + coef(epa2015_add)["typeTruck"]
slope_both  = coef(epa2015_add)[2]
slope_car   = coef(epa2015_add)[2]
slope_truck = coef(epa2015_add)[2]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
abline(epa2015_sim, lwd = 3, col = "grey")
value = predict(epa2015_add, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_add = lm(CO2 ~ horse + type, data = epa2015_data)
int_both    = coef(epa2015_add)[1]
int_car     = coef(epa2015_add)[1] + coef(epa2015_add)["typeCar"]
int_truck   = coef(epa2015_add)[1] + coef(epa2015_add)["typeTruck"]
slope_both  = coef(epa2015_add)[2]
slope_car   = coef(epa2015_add)[2]
slope_truck = coef(epa2015_add)[2]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_add, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
coef(epa2015_add)
lm(CO2 ~ horse * type, data = epa2015_data)
int_truck
int_both
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_int = lm(CO2 ~ horse * type, data = epa2015_data)
int_both    = coef(epa2015_int)[1]
int_car     = coef(epa2015_int)[1] + coef(epa2015_int)["typeCar"]
int_truck   = coef(epa2015_int)[1] + coef(epa2015_int)["typeTruck"]
slope_both  = coef(epa2015_int)["horse"]
slope_car   = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeCar"]
slope_truck = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeTruck"]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_int, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
int_both
int_car
int_truck
coef(epa2015_int)
predict(epa2015_int, newdata = data.frame(horse=0)
)
predict(epa2015_int, newdata = data.frame(horse=0, type="Both")
)
int_both
predict(epa2015_int, newdata = data.frame(horse=0, type="Truck"))
coef(epa2015_int)
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data[epa2015_data$type == "Truck"], col = as.numeric(type), pch = as.numeric(type))
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data[epa2015_data$type == "Truck",], col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_int = lm(CO2 ~ horse * type, data = epa2015_data)
int_both    = coef(epa2015_int)[1]
int_car     = coef(epa2015_int)[1] + coef(epa2015_int)["typeCar"]
int_truck   = coef(epa2015_int)[1] + coef(epa2015_int)["typeTruck"]
slope_both  = coef(epa2015_int)["horse"]
slope_car   = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeCar"]
slope_truck = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeTruck"]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_int, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_int = lm(CO2 ~ horse * type, data = epa2015_data)
int_both    = coef(epa2015_int)[1]
int_car     = coef(epa2015_int)[1] + coef(epa2015_int)["typeCar"]
int_truck   = coef(epa2015_int)[1] + coef(epa2015_int)["typeTruck"]
slope_both  = coef(epa2015_int)["horse"]
slope_car   = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeCar"]
slope_truck = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeTruck"]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_int, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
#par(mar=c(2.5, 2.5, 1.5, 1.5))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_int = lm(CO2 ~ horse * type, data = epa2015_data)
int_both    = coef(epa2015_int)[1]
int_car     = coef(epa2015_int)[1] + coef(epa2015_int)["typeCar"]
int_truck   = coef(epa2015_int)[1] + coef(epa2015_int)["typeTruck"]
slope_both  = coef(epa2015_int)["horse"]
slope_car   = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeCar"]
slope_truck = coef(epa2015_int)["horse"] + coef(epa2015_int)["horse:typeTruck"]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_int, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
anova(epa2015_add, epa2015_int)
format(0.1)
format(1.566510^{-5} )
epa2015_data = read_csv("hospital.csv")
hospital_data = read_csv("hospital.csv")
View(hospital_data)
hospital_data = read_csv("hospital.csv")
str(hospital_data)
hospital_data = read_csv("hospital.csv")
#str(hospital_data)
is.factor(hospital_data$Care)
is.factor(hospital_data$Race)
hospital_data = read_csv("hospital.csv")
#str(hospital_data)
is.factor(hospital_data$Care)
hospital_data$Care = as.factor(hospital_data$Care)
is.factor(hospital_data$Race)
hospital_data$Race = as.factor(hospital_data$Race)
hospital_data = read_csv("hospital.csv")
#str(hospital_data)
is.factor(hospital_data$Care)
hospital_data$Care = as.factor(hospital_data$Care)
is.factor(hospital_data$Care)
is.factor(hospital_data$Race)
hospital_data$Race = as.factor(hospital_data$Race)
is.factor(hospital_data$Race)
hospital_data = read_csv("hospital.csv")
#str(hospital_data)
is.factor(hospital_data$Care)
hospital_data$Care = as.factor(hospital_data$Care)
is.factor(hospital_data$Care)
is.factor(hospital_data$Race)
hospital_data$Race = as.factor(hospital_data$Race)
is.factor(hospital_data$Race)
levels(hospital_data$Care)
levels(hospital_data$Race)
hospital_data = read_csv("hospital.csv")
#str(hospital_data)
if (!is.factor(hospital_data$Care))
hospital_data$Care = as.factor(hospital_data$Care)
if (!is.factor(hospital_data$Race))
hospital_data$Race = as.factor(hospital_data$Race)
levels(hospital_data$Care)
levels(hospital_data$Race)
hospital_add = lm(Days ~ Charges + Pressure + Care + Race, data = hospital_data)
coef(hospital_add)
hospital_care_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Care +
Pressure:Care, data = hospital_data)
coef(hospital_care_int)
lm(Days ~ Charges + Pressure + Care + Race + Charges:Care +
Pressure:Care, data = hospital_data)
lm(Days ~ Race + Charges * Care + Pressure*Care, data = hospital_data)
hospital_care_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Care +
Pressure:Care, data = hospital_data)
anova(hospital_add, hospital_care_int)
hospital_care_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Care +
Pressure:Care, data = hospital_data)
anova(hospital_add, hospital_care_int)[2, "Pr(>F)"]
hospital_race_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Race +
Pressure:Race, data = hospital_data)
anova(hospital_add, hospital_race_int)[2, "Pr(>F)"]
hospital_race_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Race +
Pressure:Race, data = hospital_data)
anova(hospital_add, hospital_race_int)[2, "Pr(>F)"]
coef(hospital_race_int)
anova(hospital_care_int, hospital_race_int)
coef(hospital_race_int)
(slope = coef(hospital_race_int)["Pressure"])
hospital_care_race_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Care +
Pressure:Care + Charges:Race + Pressure:Race,
data = hospital_data)
anova(hospital_race_int, hospital_care_race_int)
coef(hospital_care_race_int)
hospital_care_race_int = lm(Days ~ Charges + Pressure + Care + Race + Charges:Care +
Pressure:Care + Charges:Race + Pressure:Race,
data = hospital_data)
anova(hospital_race_int, hospital_care_race_int)[2, "Pr(>F)"]
library(readr)
fish <- read_csv("~/Desktop/UIUC/stat420/w07-hw/fish.csv")
View(fish)
?X11
x11(width=9, height=6, pointsize=12)
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_add = lm(CO2 ~ horse + type, data = epa2015_data)
int_both    = coef(epa2015_add)[1]
int_car     = coef(epa2015_add)[1] + coef(epa2015_add)["typeCar"]
int_truck   = coef(epa2015_add)[1] + coef(epa2015_add)["typeTruck"]
slope_both  = coef(epa2015_add)["horse"]
slope_car   = coef(epa2015_add)["horse"]
slope_truck = coef(epa2015_add)["horse"]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_add, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
plot(CO2 ~ horse, data = epa2015_data, col = as.numeric(type), pch = as.numeric(type))
legend("bottomright", levels(epa2015_data$type), col = 1: nlevels(epa2015_data$type),
pch = 1:nlevels(epa2015_data$type))
epa2015_add = lm(CO2 ~ horse + type, data = epa2015_data)
int_both    = coef(epa2015_add)[1]
int_car     = coef(epa2015_add)[1] + coef(epa2015_add)["typeCar"]
int_truck   = coef(epa2015_add)[1] + coef(epa2015_add)["typeTruck"]
slope_both  = coef(epa2015_add)["horse"]
slope_car   = coef(epa2015_add)["horse"]
slope_truck = coef(epa2015_add)["horse"]
abline(int_both, slope_both, col = 1, lty = 1, lwd = 2)
abline(int_car, slope_car, col = 2, lty = 2, lwd = 2)
abline(int_truck, slope_truck, col = 3, lty = 3, lwd = 2)
value = predict(epa2015_add, interval = c("prediction"), level = 0.99, newdata = data.frame(horse = 148, type = "Both"))
fish_smaller = lm(Weight ~ Length1 + HeightPct * WidthPct, data = fish)
fish
fish_data = read_csv("fish.csv")
fish_smaller = lm(Weight ~ Length1 + HeightPct * WidthPct, data = fish_data)
fish_data = read_csv("fish.csv")
fish_smaller = lm(Weight ~ Length1 + HeightPct * WidthPct, data = fish_data)
fish_int = lm(Weight ~ Length1 * HeightPct * WidthPct, data = fish_data)
fish_int = lm(Weight ~ Length1 * HeightPct * WidthPct, data = fish_data)
anova(fish_smaller, fish_int)
fish_int = lm(Weight ~ Length1 * HeightPct * WidthPct, data = fish_data)
anova(fish_smaller, fish_int)[2, "Pr(>F)"]
coef(fish_smaller)
coef(fish_int)
result
fish_int = lm(Weight ~ Length1 * HeightPct * WidthPct, data = fish_data)
result = anova(fish_smaller, fish_int)
result
result[2, "F"]
25*15
ToothGrowth
?ToothGrowth
str(ToothGrowth)
lm(len ~ dose * supp, data = ToothGrowth)
1.1^2*0.9
2*log(1.1)
2*log(1.1)+log(0.9)
?log
log(1.1)
log(0.9)
log(2)
log(4)-log(2)
log(6)-log(2)
log(3)
log(2*3)
log(2)+log(3)
8.3*12
8.3*0.8
8.3*0.4
8.3*0.8
8.3*0.6
I
I(x^2)
x=1
I(x^2)
x=23
I(x^2)
?I
pairs(autompg)
ploy(x)
poly(x)
x
poly(x, 4)
x=1:10
poly(x,4)
poly(x,4,raw=TRUE)
x
?poly
mpg
autompg
autompg = read.table(
"http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE)
pair(autompg)
pairs(autompg)
pairs(autompg)
autompg
pairs(autompg)
str(autompg)
mpg
paris(mpg)
pairs(mpg)
?pairs
pairs(iris[-5], log = "xy")
pairs(autompg)
pairs(autompg, log="xy")
pairs(. data = autompg)
pairs(., data = autompg)
pairs(V1 ~ ., data = autompg)
pairs(iris[-5])
pairs(autompg[-9])
pairs(autompg[1])
pairs(autompg[1:3])
pairs(autompg[1:8])
pairs(autompg[1:7])
pairs(autompg[1:3])
(Y_e= 5 - 2*3)
Y_e
?pnorm
pnorm(1,mean = -1, sd = sqrt(3/4))
pnorm(1,mean = -1, sd = sqrt(3/4), lower.tail = FALSE)
pnorm(2, sd = sqrt(3/4), lower.tail = FALSE)
pnorm(1,mean = Y_e, sd = sqrt(3/4), lower.tail = FALSE)
x=1:10
which(max(x))
max(x)
which(x)
which(x > 1)
which(x == max(x))
10^9
10^8
1000*1000*1000
LifeCycleSavings
m = lm(sr ~ ., data = LifeCycleSavings)
rstandard(m)
length(rstandard(m))
nrow(LifeCycleSavings)
abs(rstandard(m)) < 2
sum(abs(rstandard(m)) < 2)
sum(abs(rstandard(m)) > 2)
sum(abs(rstandard(m)) < 2) / nrow(LifeCycleSavings)
summary(m)
?LifeCycleSavings
LifeCycleSavings
m = lm(sr ~ ., data = LifeCycleSavings)
hatvalues(m) > 2
hatvalues(m)
sum(hatvalues(m) > 2)
sum(hatvalues(m) > 2 * mean(hatvalues(m))
)
mean(hatvalues(m))
sum(hatvalues(m) > 0.1)
2
sum(hatvalues(m) > 0.2)
m = lm(sr ~ ., data = LifeCycleSavings)
which.max(cooks.distance(m))
cooks.distance(m)
max(cooks.distance(m))
n = nrow(LifeCycleSavings)
m = lm(sr ~ ., data = LifeCycleSavings)
sum(cooks.distance(m) > 4 / n)
m_1 = lm(sr ~ ., data = LifeCycleSavings,
subset = cooks.distance(m) <= 4 / n)
coef(m_1)
coef(m)
cooks.distance(m) <= 4 / n
sum(cooks.distance(m) <= 4 / n)
coef(m_1)
sum(coef(m_1))
coef(m_1)
